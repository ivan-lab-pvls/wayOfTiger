import 'package:flutter/material.dart';
import 'package:tiger_fortune/core/utils/pref_utils.dart';
import 'package:tiger_fortune/core/utils/size_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, LightCodeColors> _supportedCustomColor = {
    'lightCode': LightCodeColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'lightCode': ColorSchemes.lightCodeColorScheme
  };

  /// Returns the primary colors for the current theme.
  LightCodeColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? LightCodeColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.lightCodeColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 3,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          visualDensity: const VisualDensity(vertical: -4, horizontal: -4),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  LightCodeColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodySmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 12.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 33.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray800,
          fontSize: 28.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w900,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 22.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 18.fSize,
          fontFamily: 'Inknut Antiqua',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final lightCodeColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF7371),
    primaryContainer: Color(0XFF880E0C),
    // Error colors
    errorContainer: Color(0XFF328252),
    onError: Color(0X008E8283),
    onErrorContainer: Color(0XFFFFFFFF),
    // On colors(text colors)
    onPrimary: Color(0XFF450604),
    onPrimaryContainer: Color(0XFFFCD8D8),
  );
}


class LightCodeColors {
  Color get amber200 => Color(0XFFF7D981);

  Color get black900 => Color(0XFF000000);

  Color get blueGray400 => Color(0XFF888888);

  Color get deepOrangeA700 => Color(0XFFEE1916);

  Color get gray400 => Color(0XFFB7AEAE);

  Color get gray600 => Color(0XFF897A7A);

  Color get gray800 => Color(0XFF662C17);

  Color get gray900 => Color(0XFF282525);

  Color get orangeA200 => Color(0XFFFBA53F);

  Color get red900 => Color(0XFFAB0E0C);

  Color get red90001 => Color(0XFFAB0F0C);

  Color get red90002 => Color(0XFF9B110F);

  Color get yellow800 => Color(0XFFDF9C1A);
  Color get brown  => Color(0XFF744410);
}

LightCodeColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
